package lab.cgcl.requestClient;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.myOCR.util.JsonUtil;
import lab.cgcl.requestClient.domain.CaUser;
import lab.cgcl.requestClient.domain.SellInfo;

import org.apache.http.Consts;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class SendCoupon {
	Logger log = Logger.getLogger(ClientFormLogin.class);
	
	private BasicCookieStore cookieStore;
	private CloseableHttpClient httpclient ;
	private SqlDao dao;
	private SellInfo sellInfo;
	/**
	 * 失败时候的取账号的偏移
	 */
	private int offset = 0;

	public BasicCookieStore getCookieStore() {
		return cookieStore;
	}


	public void setCookieStore(BasicCookieStore cookieStore) {
		this.cookieStore = cookieStore;
	}


	public SqlDao getDao() {
		return dao;
	}


	public void setDao(SqlDao dao) {
		this.dao = dao;
	}

	public SendCoupon (SqlDao d , SellInfo s) {
		cookieStore = new BasicCookieStore();
		httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();
		this.dao = d;
		this.sellInfo = s;
	}
	
	public void getAccount() {
		String sql = "select username , pwd from user where used = 0 and earnedPoint = 1 limit 0 , 1;";
		try {
			Map<?, ?> map = dao.retrieve(sql);
			sellInfo.setUsername(map.get("username").toString());
			sellInfo.setPassword(map.get("pwd").toString());
			log.info("username : " + sellInfo.getUsername() + " ; password : " + sellInfo.getPassword());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void getAccount(int offset ) {
		String sql = "select username , pwd from user where used = 0 and earnedPoint = 1 limit " + offset + " , " + (offset +1 );
		try {
			Map<?, ?> map = dao.retrieve(sql);
			sellInfo.setUsername(map.get("username").toString());
			sellInfo.setPassword(map.get("pwd").toString());
			log.info("username : " + sellInfo.getUsername() + " ; password : " + sellInfo.getPassword());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void closeClient () {
		try {
			httpclient.close();
		} catch (Exception e) {
			log.error("close httpClient error" ,e);
		}
	}
	
	protected int updateDB() {
		String sql[] = new String[2];
		sql[0] = "update user set usedDate = (select now()) , Rid = '" + sellInfo.getRid() +
				"' , used = 1 , couponMoblie = '" + sellInfo.getMobile() +
				"' where username = '" + sellInfo.getUsername() +"';";
		log.debug(sql[0]);
		sql[1] = "insert into sell (mobile , wangwangID , caUsername , sellDate , couponName , Rid , couponType )" +
				" values ( '" + sellInfo.getMobile() +"' , '" + sellInfo.getWangwangID() + "' , '" + sellInfo.getUsername()  + "' , (select now()) , '" +sellInfo.getName()  + "' , '" + sellInfo.getRid()  + "' , " + sellInfo.getCouponType()+ ");"; 
		log.debug(sql[1]);
		int ret = 0 ;
		try {
			ret =dao.batchUpdate(sql);
			log.info("saved in db # username : " + sellInfo.getUsername() + " ; couponMobile : " + sellInfo.getMobile());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ret;
	}
	
	protected boolean doLogin() throws ClientProtocolException, IOException {
		CaUser user = new CaUser();
		user.setUsername(sellInfo.getUsername());
		user.setPwd(sellInfo.getPassword() );
		ClientFormLogin client = new ClientFormLogin ( user , dao) ;
		int failureCount = 0 ; 
        final int MAXFAILURE = 20;
        
    	while (!client.getLoginPage(httpclient ,cookieStore)) {
    		if ( ++ failureCount == MAXFAILURE )  {
    			log.error("try too many times in login.give up login");
    			return false;
    		}
    	}
    	while (!client.loginAction(httpclient , cookieStore)){
    		if ( ++ failureCount == MAXFAILURE )  {
    			log.error("try too many times in login.give up login");
    			return false;
    		}
    	}
        	
        return true;
	}
	
    public boolean exchangeAction (CloseableHttpClient httpclient) throws ClientProtocolException, IOException {
    	boolean flag = false;
    	HttpPost earnPoingPost = new HttpPost("http://www.canda.cn/Utility/CAndAHandler.ashx");
        List <NameValuePair> nvps1 = new ArrayList <NameValuePair>();
        nvps1.add(new BasicNameValuePair("action", "ExchangeProduct"));
        nvps1.add(new BasicNameValuePair("mobile", sellInfo.getMobile()));
        nvps1.add(new BasicNameValuePair("productId", "3"));
        nvps1.add(new BasicNameValuePair("userName", sellInfo.getName()));
        earnPoingPost.setEntity(new UrlEncodedFormEntity(nvps1, Consts.UTF_8));
        CloseableHttpResponse response3 = httpclient.execute(earnPoingPost);
      
        try {
            InputStream is = response3.getEntity().getContent();
            byte[] buffer = new byte[512];
            is.read(buffer);
            String s = new String(buffer, "UTF-8").trim();
            if ( "1".equals(JsonUtil.jsonUtil(s, "ID"))) {
            	log.info( "exchange coupon action response : " +
            			JsonUtil.jsonUtil(s , "DES"));
            	sellInfo.setRid(JsonUtil.jsonUtil(s , "Rid")) ;
            	flag = true;
            }	else if ("-1".equals(JsonUtil.jsonUtil(s, "ID"))){
            	log.error( "no enough points : " +
            			JsonUtil.jsonUtil(s , "DES"));
            	getAccount(++offset);
            	tryExchange ();
            }
            else {
            	log.error("exchange coupon action response: " +new String(buffer, "UTF-8") );
            }
            
        } catch (Exception e) {
        	log.error("exchange coupon action error." , e);
        } finally {
            response3.close();
        }
        return flag;
    }
	
    /**
     * 兑换优惠券
     * @throws ClientProtocolException
     * @throws IOException
     */
	public boolean exchange () throws ClientProtocolException, IOException {
		getAccount();
		return tryExchange();
	}
	
	private boolean tryExchange () throws ClientProtocolException, IOException{
		if (doLogin()) {
			if (exchangeAction(httpclient) ) {
				updateDB();
				log.info("exchange for " + sellInfo.getMobile() + " success.");
				return true;
			}
		}
		return false;
	}
	
	public static void main(String[] args) {
		PropertyConfigurator.configure("properties/log4j.property");
		SellInfo se = new SellInfo();
		se.setMobile("13667258772");
		se.setName("zhangsan");
		se.setWangwangID("lhc1988");
		SendCoupon sc = new SendCoupon(DaoFactory.byDefault(null) , se);
//		try {
//			sc.exchange();
//		} catch (ClientProtocolException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
			sc.getAccount();
			sc.updateDB();
	}

}
