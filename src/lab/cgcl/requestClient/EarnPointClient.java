package lab.cgcl.requestClient;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.myOCR.util.BeanUtil;
import lab.cgcl.requestClient.domain.CaUser;

public class EarnPointClient {
	private SqlDao dao ;
	private static final int POOLSIZE = 5; 
	private AccountPool accountPool = new AccountPool();
	
	/**
	 * 账号池的类
	 * @author Administrator
	 *
	 */
	protected class AccountPool implements Serializable{
		/**
		 * 
		 */
		private static final long serialVersionUID = -2957887572888833702L;
		private Vector<CaUser> Pool = new Vector<CaUser>();
		private int offset ;
		public Vector<CaUser> getPool() {
			return Pool;
		}
		public void setPool(Vector<CaUser> pool) {
			Pool = pool;
		}
		public int getOffset() {
			return offset;
		}
		public void setOffset(int offset) {
			this.offset = offset;
		}
		public int size() {
			return this.Pool.size();
		}
		
		public synchronized CaUser getObj() {
			if (this.Pool.size() == 0) 
				return null;
			new Runnable () {
				@Override
				public void run() {
					try {
						Thread.sleep(3000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					accountInputStream();
				}
			}.run();
			CaUser user = this.Pool.get(0);
			this.Pool.remove(0);
			return user;
		}
	}
	
	public boolean doEarning () {
		return false;
	}
	
	public void earnPointClient () {
		
	}

	/**
	 * 往账号池中添加数据
	 */
	public synchronized void accountInputStream() {
		if ( accountPool.size() < POOLSIZE* 0.3) {
			System.out.println("@@@@");
			int need = POOLSIZE - accountPool.size();
			List accounts = getAccount(accountPool.getOffset() , need); 
			//update pool
			accountPool.getPool().addAll(accounts);
		}
	}
	
	protected List getAccount (int offset ,  int num) {
		String sql = "select * from causer.user where used = 0 and points < 950 limit " + offset + " , " + num;
		List ret = new ArrayList();
		try {
			List acc =  dao.list(sql);
			Iterator it = acc.iterator();
			while(it.hasNext()){
				CaUser user = BeanUtil.wrapMap2Bean( (Map)(it.next()), CaUser.class);
				ret.add(user);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ret;
	}
	
	public static void main(String[] args) {
		EarnPointClient e = new EarnPointClient();
		e.dao = DaoFactory.byDefault();
//		List l = e.getAccount(0, 10);
//		Iterator it = l.iterator();
//		while (it.hasNext()) {
//			System.out.println(it.next().toString());
//		}
		e.accountInputStream();
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		System.out.println(e.accountPool.getObj());
		
	}
	
	
}
