package lab.cgcl.requestClient.domain;

import java.util.Vector;

public abstract class AccountPool {
	
	/**
	 * 账号池
	 */
	protected Vector<CaUser> Pool ;
	
	/**
	 * 池的最大容量
	 */
	protected static final int MAXPOOLSIZE = 20; 
	
	protected int offset ;
	
	public Vector<CaUser> getPool() {
		return Pool;
	}
	public void setPool(Vector<CaUser> pool) {
		Pool = pool;
	}
	public int getOffset() {
		return offset;
	}
	public void setOffset(int offset) {
		this.offset = offset;
	}
	public int size() {
		return this.Pool.size();
	}
	
	/**
	 * Constructor
	 */
	public AccountPool() {
		Pool = new Vector<CaUser>();
	}
	
	
	/**
	 * 填充缓冲区的输入流
	 */
	public abstract void accountInputStream();
	
	protected Thread workTread = new Thread(
		new Runnable () {
			@Override
			public void run() {
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				accountInputStream();
			}
		}
	) ;
	
	public synchronized CaUser getObj() {
		if (this.Pool.size() == 0) 
			accountInputStream();
		else if (this.Pool.size() < MAXPOOLSIZE && workTread.isAlive())
			workTread.start();
		CaUser user = this.Pool.get(0);
		this.Pool.remove(0);
		return user;
	}
	
}

