package lab.cgcl.requestClient.domain;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.PropertyUtils;

@SuppressWarnings("serial")
public abstract class Wrapable implements Serializable{
	
	public void wrapFromMap (Map<?,?> map) {
		//遍历所有名称
		Iterator<?> it = map.keySet().iterator();
		while(it.hasNext()){
			//取得名称
		    String name = it.next().toString();
		    if ( map.get(name) != null) {
		    	//取得值
		    	String value = map.get(name).toString();
		    	try{
				     //取得值的类形
				    Class<?> type = PropertyUtils.getPropertyType(this, name);
				    
				    if(type!=null){
				      //设置参数
				      PropertyUtils.setProperty(this, name,ConvertUtils.convert(value, type));
				     }
				}catch(Exception ex){
				     ex.printStackTrace();
				}
		    }
		    
   
		}
	}
	
	@Override
	public String toString() {
		Field[] fields = this.getClass().getDeclaredFields();
		String str = "";
		for (Field field : fields) {
			//remove final field
			if ((Modifier.FINAL & field.getModifiers()) == 0x0 ) {
				str += "{" + field.getName() + " : " ;
				try {
					str += PropertyUtils.getProperty(this, field.getName());
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				str += "};";
			}
		}
		return str;
		
	}

}
