package lab.cgcl.requestClient;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.myOCR.util.JsonUtil;
import lab.cgcl.myOCR.util.RandomChar;
import lab.cgcl.requestClient.domain.CaUser;

import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

/**
 * login in first time and earnpoints .
 * @author absolute
 *
 */
public class ClientFormLogin {
	Logger log = Logger.getLogger(ClientFormLogin.class);
	
	private CaUser caUser ;
	private BasicCookieStore cookieStore;
	private CloseableHttpClient httpclient ;
	private SqlDao dao;
	private final int MAXFAILURE = 20;
	private final int SLEEPTIME_MS = 500;

	public CaUser getCaUser() {
		return caUser;
	}

	public void setCaUser(CaUser caUser) {
		this.caUser = caUser;
	}

	public ClientFormLogin (CaUser user , SqlDao d) {
		cookieStore = new BasicCookieStore();
		httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();
		this.dao = d;
		this.caUser = user;
	}

	public static void main(String[] args) throws Exception {
		PropertyConfigurator.configure("properties/log4j.property");
		CaUser user = new CaUser();
		user.setUsername("uSpGUteF@163.com");
		user.setPwd("OnhOSVfI" );
        ClientFormLogin clf = new ClientFormLogin(
        		 user , DaoFactory.byDefault(null));
        clf.doLogin();
    }
	
	public void doLogin() throws Exception{
		/**
		 * check username and pwd is null
		 */
		if (caUser == null) {
			log.error("username or password is empty.");
			return;
		}
		int failureCount = 0 ; 
        
        try {
        	while (!getLoginPage(httpclient ,cookieStore)) {
        		if ( ++ failureCount == MAXFAILURE )  {
        			log.error("try too many times in login.give up this earn point");
        			return ;
        		}
        	}
        	while (!loginAction(httpclient , cookieStore)){
        		if ( ++ failureCount == MAXFAILURE )  {
        			log.error("try too many times in login.give up this earn point");
        			return ;
        		}
        	}
        	while (!memberImproveAction(httpclient)){
        		if ( ++ failureCount == MAXFAILURE )  {
        			log.error("try too many times in member improve.give up this earn point");
        			return ;
        		}
        			
        	}
        	
        	//earn 400 points and 200 likes
        	BuildProductParameter builder = new BuildProductParameter();
        	builder.setDao(dao);
        	List<List<BasicNameValuePair>> parameterList = builder.generateParameter(0);
        	
        	// earn times 
        	int pointCount = 0 ;
        	
        	// try times
        	int tryCount = 0;
        	do {
        		if (tryCount ++ == MAXFAILURE) {
        			log.error("try too many times in earn points.");
        			return ;
        		}
        		if (shareEarnPointAction(httpclient , parameterList.get(pointCount)) ) {
        			pointCount ++ ;
        			log.debug("earned 50 points , now sleep for " +SLEEPTIME_MS+ " ms");
        			Thread.sleep(SLEEPTIME_MS);
        		}
        	}while (pointCount !=10);
        	
        	
        	//like earn times
        	int likeCount = 0;
        	tryCount = 0;
        	
        	do {
        		if (tryCount ++ == MAXFAILURE) {
        			log.error("try too many times in like earn points.");
        			return ;
        		}
        		if (likeEarnPointAction(httpclient ) ) {
        			likeCount ++ ;
        			log.debug("earned 20 points , now sleep for "+ SLEEPTIME_MS +" second");
        			Thread.sleep(SLEEPTIME_MS);
        		}
        	}while (likeCount !=10);
        	
        	update();
        	log.info("earns enough points , now exit the thread.");
        	
        } catch (Exception e) { 
        	log.error("unhandled exception" , e);
        }
        finally {
            httpclient.close();
        }
	}
    
    public boolean getLoginPage (CloseableHttpClient httpclient , BasicCookieStore cookieStore) throws ClientProtocolException, IOException {
    	boolean flag = false;
    	
    	HttpGet httpget = new HttpGet("http://www.canda.cn/memberlogin.aspx");

        CloseableHttpResponse response1 = httpclient.execute(httpget);
        try {
            HttpEntity entity = response1.getEntity();

            log.debug("Login form get: " + response1.getStatusLine());
            EntityUtils.consume(entity);

//            System.out.println("Initial set of cookies:");
//            List<Cookie> cookies = cookieStore.getCookies();
//            if (cookies.isEmpty()) {
//                System.out.println("None");
//            } else {
//                for (int i = 0; i < cookies.size(); i++) {
//                    System.out.println("- " + cookies.get(i).toString());
//                }
//            }
            if (response1.getStatusLine().getStatusCode() == 200) {
            	flag = true;
            }
        } catch (Exception e) {
        	e.printStackTrace();
        } finally {
            response1.close();
        }
        return flag;
    }
    
    public boolean loginAction (CloseableHttpClient httpclient , BasicCookieStore cookieStore) throws ClientProtocolException, IOException {
    	boolean flag = false;
    	HttpPost httpost = new HttpPost("http://www.canda.cn/Utility/CAndAHandler.ashx");
        List <NameValuePair> nvps = new ArrayList <NameValuePair>();
        nvps.add(new BasicNameValuePair("action", "MEMBERLOGIN"));
        nvps.add(new BasicNameValuePair("password", caUser.getPwd()));
        nvps.add(new BasicNameValuePair("remember", "1"));
        nvps.add(new BasicNameValuePair("username", caUser.getUsername()));

        httpost.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8));

        CloseableHttpResponse response2 = httpclient.execute(httpost);
        try {
            HttpEntity entity = response2.getEntity();

            log.debug("Login action get: " + response2.getStatusLine());
            
            InputStream is = entity.getContent();
            byte[] buffer = new byte[512];
            is.read(buffer);
            //String s = new String(buffer, "UTF-8");
            //System.out.println("Login form response: " +s );
            if ( "1".equals(JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "ID"))) {
            	log.info( "login action response : " +
            			JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "DES"));
            	EntityUtils.consume(entity);

//                System.out.println("Post logon cookies:");
//                List<Cookie> cookies = cookieStore.getCookies();
//                if (cookies.isEmpty()) {
//                    System.out.println("None");
//                } else {
//                    for (int i = 0; i < cookies.size(); i++) {
//                        System.out.println("- " + cookies.get(i).toString());
//                    }
//                }
                flag = true;
            } else {
            	log.warn("Login form response: " +new String(buffer, "UTF-8") );
            }
            
        } catch (Exception e) {
        	log.error("login action error." , e);
        } finally {
            response2.close();
        }
        return flag;
    }
    
    public boolean shareEarnPointAction (CloseableHttpClient httpclient  , 
    		List <BasicNameValuePair> nvps1)
    		throws ClientProtocolException, IOException {
    	boolean flag = false;
    	HttpPost earnPoingPost = new HttpPost("http://www.canda.cn/Utility/CAndAHandler.ashx");
        earnPoingPost.setEntity(new UrlEncodedFormEntity(nvps1, Consts.UTF_8));
        CloseableHttpResponse response3 = httpclient.execute(earnPoingPost);
      
        try {
            InputStream is = response3.getEntity().getContent();
            byte[] buffer = new byte[512];
            is.read(buffer);
            if ( "1".equals(JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "ID"))) {
            	log.debug( "earn point action response : " +
            			JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "DES"));
            	flag = true;
            }	else {
            	log.debug("earn point action response: " +new String(buffer, "UTF-8") );
            }
            
        } catch (Exception e) {
        	log.error("earnPoint action error." , e);
        } finally {
            response3.close();
        }
        return flag;
    }
    
    public boolean likeEarnPointAction (CloseableHttpClient httpclient )
    		throws ClientProtocolException, IOException {
    	boolean flag = false;
    	HttpPost earnPoingPost = new HttpPost("http://www.canda.cn/Utility/CAndAHandler.ashx");
    	
    	List <BasicNameValuePair> nvps1 = new ArrayList<BasicNameValuePair> ();
    	nvps1.add(new BasicNameValuePair("action", "EARNPOINT"));
    	nvps1.add(new BasicNameValuePair("pid", "531"));
    	nvps1.add(new BasicNameValuePair("tid", "1"));
    	
        earnPoingPost.setEntity(new UrlEncodedFormEntity(nvps1, Consts.UTF_8));
        CloseableHttpResponse response3 = httpclient.execute(earnPoingPost);
      
        try {
            InputStream is = response3.getEntity().getContent();
            byte[] buffer = new byte[512];
            is.read(buffer);
            if ( "1".equals(JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "ID"))) {
            	log.debug( "like earn point action response : " +
            			JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "DES"));
            	flag = true;
            }	else {
            	log.debug("like earn point action response: " +new String(buffer, "UTF-8") );
            }
            
        } catch (Exception e) {
        	log.error("like earnPoint action error." , e);
        } finally {
            response3.close();
        }
        return flag;
    }
    
    
    
    
    /**
     * 初次个人信息
     * @param httpclient
     * @return
     * @throws Exception
     */
    public boolean memberImproveAction (CloseableHttpClient httpclient) throws Exception {
    	boolean flag = false;
    	HttpPost httpPost = new HttpPost("http://www.canda.cn/Utility/CAndAHandler.ashx");
        List <NameValuePair> nvps1 = new ArrayList <NameValuePair>();
        nvps1.add(new BasicNameValuePair("action", "MEMBERIMPROVE"));
        nvps1.add(new BasicNameValuePair("address", ""));
        nvps1.add(new BasicNameValuePair("avatarUrl", ""));
        nvps1.add(new BasicNameValuePair("birthday", ""));
        nvps1.add(new BasicNameValuePair("city", "63"));
        caUser.setMobile(RandomChar.RandomMoblieNo())  ;
        nvps1.add(new BasicNameValuePair("mobile", caUser.getMobile()));
        nvps1.add(new BasicNameValuePair("province", "6"));
        nvps1.add(new BasicNameValuePair("qq", ""));
        nvps1.add(new BasicNameValuePair("sex", "1"));
        nvps1.add(new BasicNameValuePair("username", caUser.getUsername()));
        nvps1.add(new BasicNameValuePair("weibo", ""));
        httpPost.setEntity(new UrlEncodedFormEntity(nvps1, Consts.UTF_8));
        CloseableHttpResponse response3 = httpclient.execute(httpPost);
      
        try {
            InputStream is = response3.getEntity().getContent();
            byte[] buffer = new byte[512];
            is.read(buffer);
            if ( "1".equals(JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "ID"))) {
            	log.debug( "member improve action response : " +
            			JsonUtil.jsonUtil(new String(buffer , "UTF-8") , "DES"));
            	flag =  true;
            }	else {
            	log.debug("member improve action response: " +new String(buffer, "UTF-8") );
            }
            
        } catch (Exception e) {
        	log.error("member improve action error." , e);
        } finally {
            response3.close();
        }
        return flag;
    }
    
    public void update() throws Exception {
    	String sql = "update CAuser.user set earnedPoint = 1 , points = 1110 , " +
    			"lastEarnPointDate = (select now() ) ,  moblie = '"	+ caUser.getMobile() + 
    			"' where username = '" + caUser.getUsername() + "';";
    	dao.update(sql);
    	log.info( caUser.getUsername() + " status saved db success");
    }
    
//    protected BasicNameValuePair genParam(int n ) {
//    	
//    }
}
