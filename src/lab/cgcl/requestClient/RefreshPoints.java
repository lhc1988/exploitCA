package lab.cgcl.requestClient;

import java.io.InputStream;
import java.util.Map;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.requestClient.domain.CaUser;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

public class RefreshPoints {
	Logger log = Logger.getLogger(RefreshPoints.class);
	
	private SqlDao dao ;

	public SqlDao getDao() {
		return dao;
	}
	public void setDao(SqlDao dao) {
		this.dao = dao;
	}
	
	public void refresh() {
		try {
			int total = getAmount();
			log.info("all tasks amount: " + total);
			for ( int i = 0 ; i < total ; i++) {
				log.info("No." + (i+1 ) + " task.");
				CaUser user = getAccount(i);
				docheck(user);
				updateDB(user);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	public void docheck(CaUser caUser) {
		
		BasicCookieStore cookieStore = new BasicCookieStore();
        CloseableHttpClient httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();
		
		ClientFormLogin cfl = new ClientFormLogin(caUser , dao);
		try {
			log.info("login as : " + caUser.getUsername());
			// ²»Í£³¢ÊÔµÇÂ¼
			while (!cfl.getLoginPage(httpclient, cookieStore) || !cfl.loginAction(httpclient, cookieStore)) ;
			int points = getPointAction(caUser, httpclient, cookieStore);
			caUser.setPoints(points);
		} catch (Exception e) {
			log.error("error while login." , e);
		}
		
	}
	
	public int getPointAction (CaUser user , CloseableHttpClient httpclient , BasicCookieStore cookieStore) throws Exception {
		String pointURL = "http://www.canda.cn/pointsredemption.aspx";
		String baseUri = "http://www.canda.cn/";
		HttpGet httpget = new HttpGet(pointURL);
		CloseableHttpResponse response1 = httpclient.execute(httpget);
        int points = 0;
        
        if (response1.getStatusLine().getStatusCode() != 200) {
        	// fail to connect server 
        	log.error("error while getting points page , statusline : " + response1.getStatusLine());
        	throw new Exception();
        }
        
        try {
            InputStream is = response1.getEntity().getContent();
            Document doc  = Jsoup.parse(is, "UTF-8", baseUri);
            Element element = doc.getElementsByClass("point").first();
        	if (element != null) {
        		String pointsStr = element.getElementsByTag("span").first().text();
            	points = Integer.parseInt(pointsStr);
        		log.info("get " + user.getUsername() +" have points : " + points);
        	}
        } catch (Exception e) {
        	log.error("error while getting point in page" ,e);
        } finally {
        	response1.close();
        }
        return points;
	}
	
	public int updateDB(CaUser caUser ) throws Exception {
		String sql = "update user set points = " + caUser.getPoints() +
				" where username = '" +caUser.getUsername() + "';";
		return dao.update(sql);
	}
	
	public CaUser getAccount(int no) throws Exception {
		CaUser caUser = new CaUser();
		String sql = "select username , pwd from user order by id asc limit " + no + ","+ (no+1);
		Map result = dao.retrieve(sql);
		caUser.setUsername(result.get("username").toString());
		caUser.setPwd(result.get("pwd").toString());
		log.info("get user from db :" + caUser.getUsername());
		return caUser;
	}
	
	public int getAmount () throws Exception {
		String sql = "select count(*) from user where earnedPoint = 1";
		return dao.count(sql);
	}
	
	public static void main(String[] args) {
		PropertyConfigurator.configure("properties/log4j.property");
		RefreshPoints rf = new RefreshPoints();
		rf.setDao(DaoFactory.byDefault());
		rf.refresh();
	}

}
