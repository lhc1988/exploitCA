package lab.cgcl.requestClient;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import lab.cgcl.dao.DbcpPool;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.dao.SqlDaoImpl;

import org.apache.log4j.PropertyConfigurator;


public class Client {
	private static final int MAX_THREAD = 5;
	private SqlDao dao ;
	private static final int goal = 10000;
	
	public SqlDao getDao() {
		return dao;
	}

	public void setDao(SqlDao dao) {
		this.dao = dao;
	}

	public static void main(String[] args) {
		PropertyConfigurator.configure("");
		Client cli = new Client();
		cli.initial();
		ExecutorService executorService1 = Executors.newFixedThreadPool(MAX_THREAD);
		for (int count = 0 ;count < goal ; count ++) {
			executorService1.execute(new Client().new RegThread(cli.getDao()));
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		try {
			while (true){
				try {
					Thread.sleep(1800 * 1000);
					executorService1.wait(300 * 1000);
					Thread.sleep(300 * 1000);
					
				} finally {
					executorService1.notifyAll();
				}
				
			}
		} catch (Exception e ) {
			e.printStackTrace();
		} finally {
			executorService1.shutdown();
		}
	}
	
	class RegThread implements Runnable {
		
		private SqlDao threadDao;
		public RegThread (SqlDao d) {
			this.threadDao = d;
		}
		
		public void run() {
			try {
				ClientRegister reg = new ClientRegister(threadDao);
				if (reg.reg() == HttpCode.SUCCESS) {
					ClientFormLogin login = new ClientFormLogin(reg.getUsername() , reg.getPassword() , threadDao);
					login.doLogin();
				}
				System.out.println("this task end.");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	public void initial() {
		DbcpPool pool = new DbcpPool();
		this.dao = new SqlDaoImpl(pool.getDataSource());
	}
	

}
