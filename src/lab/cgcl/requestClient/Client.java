package lab.cgcl.requestClient;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;


public class Client {
	private static int MAX_THREAD = 1;
	private SqlDao dao ;
	private static int GOAL = 100;
	protected static Logger log = Logger.getLogger(Client.class);
	
	public SqlDao getDao() {
		return dao;
	}

	public void setDao(SqlDao dao) {
		this.dao = dao;
	}

	public static void main(String[] args) {
		if (args.length != 3 ) {
			System.out.println("usage: \n\tparam1 : max_threa\n\tparam2 : goal number to register");
			System.out.println("example : exploitCA 10 10000 ");
			System.out.println("\tmeans initial 10 threads to register 10000 accounts with schedule.");
			System.exit(-1);
		}
		PropertyConfigurator.configure("properties/log4j.property");
		log.info("starting exploitCA!");
		int sch = 0 ;
		try {
			MAX_THREAD = Integer.parseInt(args[0]);
			GOAL = Integer.parseInt(args[1]);
		} catch (NumberFormatException e) {
			System.out.println("bad parameters.");
			System.exit(-1);
		}
		log.info("load parameters: MAX_THREAD=" + MAX_THREAD +
				" ; GOAL=" + GOAL);
		Client cli = new Client();
		cli.regsiter();
		log.warn("all task has done . now exit the program");
		System.exit(0);
	}
	
	class RegThread implements Runnable {
		
		private SqlDao threadDao;
		public RegThread (SqlDao d) {
			this.threadDao = d;
		}
		
		public void run() {
			try {
				log.info("a new task start.ID=" + Thread.currentThread().getId());
				ClientRegister reg = new ClientRegister(threadDao);
				if (reg.reg() == HttpCode.SUCCESS) {
					ClientFormLogin login = new ClientFormLogin(reg.getUsername() , reg.getPassword() , threadDao);
					login.doLogin();
				}
				log.info("this task end.ID=" + Thread.currentThread().getId());
			} catch (Exception e) {
				log.error("task crashed" ,e);
			}
		}
		
	}
	
	public void initial() {
		log.info("initializing...");
		this.dao = DaoFactory.byDefault();
		log.info("initialize finished");
	}
	
	public void schedule (ExecutorService executorService) {
		synchronized(executorService) {
			while (!executorService.isTerminated()){
				try {
					log.info("wait 0.5h then sleep for 5min");
					try {
						Thread.sleep(60*1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					try {
						if (executorService.isTerminated()) {
							break;
						}
						executorService.wait(300 * 1000);
						log.info("sleep for 5min");
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					try {
						executorService.notifyAll();
						log.info("noitify all work thread");
					} catch (Exception e) {
						
					}
				} catch (Exception e) {
					log.warn("error in schdule" , e);
				}
				
			}
		}
	}
	
	public void regsiter () {
		Client cli = new Client();
		cli.initial();
		ExecutorService executorService1 = Executors.newFixedThreadPool(MAX_THREAD);
		for (int count = 0 ;count < GOAL ; count ++) {
			executorService1.execute(new Client().new RegThread(cli.getDao()));
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		log.info("call shutdown threadpool");
		executorService1.shutdown();
		
		log.info("achieve the goal,stop regstering");
	}
	

}
