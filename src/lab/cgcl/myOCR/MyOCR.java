package lab.cgcl.myOCR;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import lab.cgcl.myOCR.util.Utility;

import com.asprise.util.ocr.OCR;

public class MyOCR {
	private static Map<BufferedImage, String> trainMap = loadTrainData();
	protected static Logger log = Logger.getLogger(MyOCR.class);
	
	public static void main(String[] args) {
		PropertyConfigurator.configure("properties/log4j.property");
		BufferedImage a = Utility.loadImage("e:/validCode/11381.jpg");
		processByTrain(a);
		
		//processEachChar(a);
		//processImg(a);
	}
	
	public static void processImg (BufferedImage a) {
		PreProcess preProcess = new PreProcess(128);
		BufferedImage tmp ;
		tmp = preProcess.toGrey(a);
		//tmp = preProcess.toBlackAndWhite(tmp);
		
		//ÂË²¨
		tmp = preProcess.median2(tmp);
		Utility.writeImage(tmp , "median");
		String s = getRecogniseStr(tmp);
		System.out.println(s );
		
	}
	
	public static void processEachChar (BufferedImage a ) {
		BufferedImage tmp ;
		PreProcess preProcess = new PreProcess(128);
		
		for (int i = 0 ; i != 5 ;  i ++) {
//			ocr.writeImage(a.getSubimage(7 + i*9, 5,8,12) , i);
//			try {
//				ocr.writeImage( removeBackgroud(  a.getSubimage(7 + i*9, 5,8,12) ) , i);
//			} catch (Exception e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
			
			tmp = preProcess.toGrey(a.getSubimage(7 + i*9, 5,8,12));
			
			Utility.writeImage(tmp , i+1 );
			
			
			String s = getRecogniseStr(tmp);
			System.out.println(s );
			
			
			
			tmp = preProcess.toBlackAndWhite(tmp);
			Utility.writeImage(tmp, (i+1) * 111); 
			
			//ÂË²¨
			tmp = preProcess.median2(tmp);
			Utility.writeImage(tmp , (i+1) * 11 );
			
			s = getRecogniseStr(tmp);
			System.out.println(s + "----");
		}
	}
	
	public static String processByTrain( BufferedImage a ) {
		BufferedImage tmp ;
		String result = "";
		PreProcess preProcess = new PreProcess(128);
		for (int i = 0 ; i != 5 ;  i ++) { 
			tmp = preProcess.toGrey(a.getSubimage(7 + i*9, 5,8,12));
			tmp = preProcess.toBlackAndWhite(tmp);
			//Utility.writeImage(tmp, i+1) ;
			String s = getSingleCharOcr2(tmp , trainMap);
			//System.out.println(s);
			result += s;
		}
		log.info("recognize as :" + result) ;
		return result;
	}
	
	
	/**
	 * from file
	 * @param imageFile
	 * @return
	 */
	public static String getRecogniseStr(File imageFile) {
		String s = "";
		try {
			BufferedImage image = ImageIO.read(imageFile);
			int width = image.getTileWidth();
			int height = image.getTileHeight();
			image = image.getSubimage(1, 1, width-2, height-2);
			s = new OCR().recognizeEverything(image);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(" Í¼Æ¬Ê¶±ðÊ§°Ü£¡ ");
		}
		log.info("recognize as :" +s);
		return s;
	}
	
	/**
	 * from BufferedImage
	 * @param image
	 * @return
	 */
	public static String getRecogniseStr(BufferedImage image ) {
		String s = new OCR().recognizeEverything(image);
		return s;
	}
	
	public static Map<BufferedImage, String> loadTrainData() {
		if (trainMap == null) {
			try {
			Map<BufferedImage, String> map = new HashMap<BufferedImage, String>();
			File dir = new File("train");
			File[] files = dir.listFiles();
			for (File file : files) {
				map.put(ImageIO.read(file), file.getName().charAt(0) + "");
			}
			trainMap = map;
			} catch (Exception e) {
				log.error("load train data failed" , e);
			}
		}
		return trainMap;
	}
	
	public static String getSingleCharOcr(BufferedImage img,
			Map<BufferedImage, String> map) {
		String result = "#";
		int width = img.getWidth();
		int height = img.getHeight();
		int min = width * height;
		for (BufferedImage bi : map.keySet()) {
			int count = 0;
//			if (Math.abs(bi.getWidth()-width) > 2)
//				continue;
//			int widthmin = width < bi.getWidth() ? width : bi.getWidth();
//			int heightmin = height < bi.getHeight() ? height : bi.getHeight();
			Label1: for (int x = 0; x < width; ++x) {
				for (int y = 0; y < height; ++y) {
					if (isBlack(img.getRGB(x, y)) != isBlack(bi.getRGB(x, y))) {
						count++;
						if (count >= min)
							break Label1;
					}
				}
			}
			if (count < min) {
				min = count;
				result = map.get(bi);
			}
		}
		return result;
	}
	
	public static int isBlack(int colorInt) {
		Color color = new Color(colorInt);
		if (color.getRed() + color.getGreen() + color.getBlue() <= 100) {
			return 1;
		}
		return 0;
	}
	
	public static void countblack() {
		int h = 12 , w = 8;
		for (BufferedImage bi : trainMap.keySet()) {
			int count =0;
			for (int x = 0 ; x< w ; x++) {
				for (int y = 0 ;y< h ; y ++) {
					count += isBlack(bi.getRGB(x, y));
				}
			}
			System.out.println( trainMap.get(bi) + "=" + count);
		}
	}
	
	public static String getSingleCharOcr2(BufferedImage img,
			Map<BufferedImage, String> map) {
		String result = "#";
		int width = img.getWidth();
		int height = img.getHeight();
		int min = 28;
		for (BufferedImage bi : map.keySet()) {
			int count = 0;
			Label1: for (int x = 0; x < width; ++x) {
				for (int y = 0; y < height; ++y) {
					if (isBlack(img.getRGB(x, y)) != isBlack(bi.getRGB(x, y))) {
						count++;
						if (count >= min)
							break Label1;
					}
				}
			}
			if (count < min) {
				min = count;
				result = map.get(bi);
			}
		}
		return result;
	}
	
	
}


