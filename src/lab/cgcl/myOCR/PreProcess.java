package lab.cgcl.myOCR;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.PixelGrabber;
import java.util.Arrays;

public class PreProcess {
	private int minY = 0 ;
	private int minX = 0;
	private int average = 128;

	public int getMinY() {
		return minY;
	}

	public void setMinY(int minY) {
		this.minY = minY;
	}

	public int getMinX() {
		return minX;
	}

	public void setMinX(int minX) {
		this.minX = minX;
	}

	public int getAverage() {
		return average;
	}

	public void setAverage(int average) {
		this.average = average;
	}
	
	/**
	 * constructor
	 * @param minX
	 * @param minY
	 * @param average
	 */
	PreProcess(int minX , int minY , int average) {
		this.setAverage(average);
		this.setMinX(minX);
		this.setMinY(minY);
	}
	
	PreProcess(int average) {
		this.setAverage(average);
	}
	
	PreProcess() {
		
	}

	/**
	 * 将img 灰度化
	 * @param img
	 * @return
	 */
	public BufferedImage toGrey(BufferedImage img) {
		for (int y = minY; y < img.getHeight(); y++) {  
		    for (int x = minX; x < img.getWidth(); x++) {  
		        int rgb = img.getRGB(x, y);  
		        Color color = new Color(rgb); // 根据rgb的int值分别取得r,g,b颜色。  
		        int gray = (int) (0.5 * color.getRed() + 0  
		            * color.getGreen() + 0.5 * color.getBlue());  
		        Color newColor = new Color(gray, gray, gray);  
		        img.setRGB(x, y, newColor.getRGB());  
		    }  
		}  
		return img; 
	}
	
	/**
	 * 将灰度反转
	 * @param img
	 * @return
	 */
	public BufferedImage reverseGrey ( BufferedImage img ) {
		
		for (int y = minY; y < img.getHeight(); y++) {  
		    for (int x = minX; x <img.getWidth(); x++) {  
		        int rgb = img.getRGB(x, y);  
		        Color color = new Color(rgb); // 根据rgb的int值分别取得r,g,b颜色。  
		        Color newColor = new Color(255 - color.getRed(), 255 - color  
		            .getGreen(), 255 - color.getBlue());  
		        img.setRGB(x, y, newColor.getRGB());  
		    }  
		} 
		return img;
	}
	
	/**
	 * 将图像二值化
	 * @param img
	 * @return
	 */
	public BufferedImage toBlackAndWhite ( BufferedImage img) {
		
		for (int y = minY; y < img.getHeight(); y++) {  
		    for (int x = minX; x < img.getWidth(); x++) {  
		        int rgb = img.getRGB(x, y);  
		        Color color = new Color(rgb); // 根据rgb的int值分别取得r,g,b颜色。  
		        int value = 255 - color.getBlue();  
		        if (value > average) {  
		            Color newColor = new Color(0, 0, 0);  
		            img.setRGB(x, y, newColor.getRGB());  
		        } else {  
		            Color newColor = new Color(255, 255, 255);  
		            img.setRGB(x, y, newColor.getRGB());  
		        }  
		    }  
		}  
		return img;
		
	}
	
	public BufferedImage median(BufferedImage img) {
		int w = img.getWidth();  
        int h = img.getHeight();  
        int[] pix = new int[w*h];
        int newpix[] = new int[w*h];  
        int[] temp = new int[9];  
        ColorModel cm = ColorModel.getRGBdefault();  
        int r=0;  
        for(int y=0; y<h; y++) {  
            for(int x=0; x<w; x++) {  
                if(x!=0 && x!=w-1 && y!=0 && y!=h-1) {  
                    //g = median[(x-1,y-1) + f(x,y-1)+ f(x+1,y-1)  
                    //  + f(x-1,y) + f(x,y) + f(x+1,y)  
                    //  + f(x-1,y+1) + f(x,y+1) + f(x+1,y+1)]                     
                    temp[0] = cm.getRed(pix[x-1+(y-1)*w]);   
                    temp[1] = cm.getRed(pix[x+(y-1)*w]);  
                    temp[2] = cm.getRed(pix[x+1+(y-1)*w]);  
                    temp[3] = cm.getRed(pix[x-1+(y)*w]);  
                    temp[4] = cm.getRed(pix[x+(y)*w]);  
                    temp[5] = cm.getRed(pix[x+1+(y)*w]);  
                    temp[6] = cm.getRed(pix[x-1+(y+1)*w]);  
                    temp[7] = cm.getRed(pix[x+(y+1)*w]);  
                    temp[8] = cm.getRed(pix[x+1+(y+1)*w]);  
                    Arrays.sort(temp);  
                    r = temp[4];  
                    newpix[y*w+x] = 255<<24 | r<<16 | r<<8 |r;  
                } else {  
                    newpix[y*w+x] = pix[y*w+x];  
                }  
            }  
        }  
        img.setRGB(0, 0, w, h, newpix, 0, w);
        return img;
	}
	
	public BufferedImage median2 (BufferedImage im ) {
		int  iw = im.getWidth(), ih = im.getHeight();  
	    int[] pixels = new int[iw*ih]; 
		 PixelGrabber pg = new PixelGrabber(im,0,0,iw,ih,pixels,0,iw);  
         try {
			pg.grabPixels();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  
         BufferedImage grayImage = new BufferedImage(iw, ih,   
                 BufferedImage.TYPE_INT_RGB);  
         
       ColorModel cm = ColorModel.getRGBdefault();  
         
       int[] tpRed = new int[9];  
       int[] tpGreen = new int[9];  
       int[] tpBlue = new int[9];  
         
       for(int i=1;i<ih-1;i++){  
           for(int j=1;j<iw-1;j++){  
                 
               tpRed[0] = cm.getRed(pixels[(i-1)*iw+j-1]);  
               tpRed[1] = cm.getRed(pixels[(i-1)*iw+j]);  
               tpRed[2] = cm.getRed(pixels[(i-1)*iw+j+1]);  
               tpRed[3] = cm.getRed(pixels[i*iw+j-1]);  
               tpRed[4] = cm.getRed(pixels[i*iw+j]);  
               tpRed[5] = cm.getRed(pixels[i*iw+j+1]);  
               tpRed[6] = cm.getRed(pixels[(i+1)*iw+j-1]);  
               tpRed[7] = cm.getRed(pixels[(i+1)*iw+j]);  
               tpRed[8] = cm.getRed(pixels[(i+1)*iw+j+1]);  
                   for(int rj=0; rj<8; rj++){  
                   for(int ri=0; ri<8-rj; ri++){  
                       if(tpRed[ri]>tpRed[ri+1]){  
                           int Red_Temp = tpRed[ri];  
                           tpRed[ri] = tpRed[ri+1];  
                           tpRed[ri+1] = Red_Temp;  
                       }  
                   }  
               }  
               int medianRed = tpRed[4];  
                 
               tpGreen[0] = cm.getGreen(pixels[(i-1)*iw+j-1]);  
               tpGreen[1] = cm.getGreen(pixels[(i-1)*iw+j]);  
               tpGreen[2] = cm.getGreen(pixels[(i-1)*iw+j+1]);  
               tpGreen[3] = cm.getGreen(pixels[i*iw+j-1]);  
               tpGreen[4] = cm.getGreen(pixels[i*iw+j]);  
               tpGreen[5] = cm.getGreen(pixels[i*iw+j+1]);  
               tpGreen[6] = cm.getGreen(pixels[(i+1)*iw+j-1]);  
               tpGreen[7] = cm.getGreen(pixels[(i+1)*iw+j]);  
               tpGreen[8] = cm.getGreen(pixels[(i+1)*iw+j+1]);  
               for(int rj=0; rj<8; rj++){  
                   for(int ri=0; ri<8-rj; ri++){  
                       if(tpGreen[ri]>tpGreen[ri+1]){  
                           int Green_Temp = tpGreen[ri];  
                           tpGreen[ri] = tpGreen[ri+1];  
                           tpGreen[ri+1] = Green_Temp;  
                       }  
                   }  
               }  
               int medianGreen = tpGreen[4];  
                 
               tpBlue[0] = cm.getBlue(pixels[(i-1)*iw+j-1]);  
               tpBlue[1] = cm.getBlue(pixels[(i-1)*iw+j]);  
               tpBlue[2] = cm.getBlue(pixels[(i-1)*iw+j+1]);  
               tpBlue[3] = cm.getBlue(pixels[i*iw+j-1]);  
               tpBlue[4] = cm.getBlue(pixels[i*iw+j]);  
               tpBlue[5] = cm.getBlue(pixels[i*iw+j+1]);  
               tpBlue[6] = cm.getBlue(pixels[(i+1)*iw+j-1]);  
               tpBlue[7] = cm.getBlue(pixels[(i+1)*iw+j]);  
               tpBlue[8] = cm.getBlue(pixels[(i+1)*iw+j+1]);  
               for(int rj=0; rj<8; rj++){  
                   for(int ri=0; ri<8-rj; ri++){  
                       if(tpBlue[ri]>tpBlue[ri+1]){  
                           int Blue_Temp = tpBlue[ri];  
                           tpBlue[ri] = tpBlue[ri+1];  
                           tpBlue[ri+1] = Blue_Temp;  
                       }  
                   }  
               }  
               int medianBlue = tpBlue[4];  
                 
               int rgb = 255<<24|medianRed<<16|medianGreen<<8|medianBlue;   
               grayImage.setRGB(j, i, rgb);  
           }     
       }  
       return grayImage;  
	}

	

}
