package lab.cgcl.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

public class SqlDaoImpl implements SqlDao{
	private DataSource dataSource;
	
	public DataSource getDataSource() {
		return dataSource;
	}

	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	/**
	 * constructor
	 * @param dataSource
	 */
	public SqlDaoImpl(DataSource dataSource) {
		this.setDataSource(dataSource);
	}
	
	/**
	 * return a result list
	 * @param sql
	 * @return
	 * @throws Exception
	 */
	public List<Map> list (String sql) throws Exception{
		Connection con = dataSource.getConnection();
		Statement stmt =  con.createStatement();
		ResultSet rset = stmt.executeQuery(sql);
		ArrayList<Map> rlist = new ArrayList<Map>();
		while (rset.next()) {
			Map<String ,String > res = new HashMap<String , String>();
			for (int i = 1 ; i  <= rset.getMetaData().getColumnCount() ; i ++) {
				res.put(rset.getMetaData().getColumnName(i) , rset.getString(i) );
			}
			rlist.add(res);
		}
		con.close();
		return rlist;
	}
	
	/**
	 * insert
	 * @param sql
	 * @return
	 * @throws Exception
	 */
	public int insert(String sql) throws Exception {
		Connection con = dataSource.getConnection();
		int ret = 0;
		try {
			Statement stmt =  con.createStatement();
			ret = stmt.executeUpdate(sql);
		} finally {
			con.close();
		}
		return ret;
	}
	
	
	@Override
	public Map retrieve(String sql) throws Exception {
		Connection con = dataSource.getConnection();
		Statement stmt =  con.createStatement();
		Map <String , Object> res = new HashMap<String , Object>();
		try {
			ResultSet rset = stmt.executeQuery(sql);
			if (rset.next()) {
				for (int i = 1 ; i  <= rset.getMetaData().getColumnCount() ; i ++) {
					res.put(rset.getMetaData().getColumnName(i) , rset.getString(i) );
				}
			}
		}finally {
			con.close();
		}
		
		return res;
	}

	@Override
	public int delete(String sql) throws Exception {
		return update(sql);
	}

	@Override
	public int update(String sql) throws Exception {
		Connection con = dataSource.getConnection();
		int ret = 0;
		try {
			Statement stmt =  con.createStatement();
			ret = stmt.executeUpdate(sql);
		} finally {
			con.close();
		}
		return ret;
	}

	@Override
	public int batchInsert(String[] sql) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int batchUpdate(String[] sql) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}
	
	@Override
	public boolean execute(String sql) throws Exception {
		Connection con = dataSource.getConnection();
		boolean ret = false;
		try {
			Statement stmt =  con.createStatement();
			ret = stmt.execute(sql);
		} finally {
			con.close();
		}
		return ret;
	}

	public int count(String sql) throws Exception {
		Connection con = dataSource.getConnection();
		Statement stmt =  con.createStatement();
		int res = 0;
		try {
			ResultSet rset = stmt.executeQuery(sql);
			if (rset.next()) {
				res = Integer.parseInt(rset.getString(1));
			}
		}finally {
			con.close();
		}
		
		return res;
	}
		
	public static void main(String[] args) {
		SqlDaoImpl dao = new SqlDaoImpl(new DbcpPool().getDataSource());
		String sql = " select count(*) from CAuser.user;" ;
		try {
			System.out.println(dao.count(sql));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


}
