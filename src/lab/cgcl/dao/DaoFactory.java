package lab.cgcl.dao;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import javax.sql.DataSource;


public class DaoFactory {
	
	/**
	 * 默认实例化SqlDaoImpl
	 * @return
	 */
	public static SqlDao byDefault (String str) {
		DbcpPool pool = null;
		if (str == null) {
			pool = new DbcpPool();
		} else {
			pool = new DbcpPool(str);
		}
		return new SqlDaoImpl(pool.getDataSource());
	}
	
	
	/**
	 * 根据传入的类实例化dao，str可null
	 * @param clazz
	 * @param str
	 * @return
	 * @throws NoSuchMethodException 
	 * @throws SecurityException 
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 * @throws InstantiationException 
	 * @throws IllegalArgumentException 
	 */
	public static SqlDao byClass(Class<? extends SqlDao> clazz , String str) throws SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {
		DbcpPool pool = new DbcpPool(str);
		Class<DataSource> param = DataSource.class;
		Constructor<? extends SqlDao> construct = clazz.getDeclaredConstructor(param);
		return construct.newInstance(pool);
	}
	
	public static SqlDao byClass(Class<? extends SqlDao> clazz) throws SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {
		DbcpPool pool = new DbcpPool();
		Class<?>[] param = new Class[1];
		param[0] = DataSource.class;
		Constructor<? extends SqlDao> construct = clazz.getDeclaredConstructor(param);
		return construct.newInstance(pool.getDataSource());
	}
	
}
