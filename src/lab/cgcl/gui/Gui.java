package lab.cgcl.gui;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.requestClient.SendCoupon;
import lab.cgcl.requestClient.domain.SellInfo;

import org.apache.http.client.ClientProtocolException;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

public class Gui {
	static Logger log = Logger.getLogger(Gui.class);
	private static SqlDao dao ;
	
	public SqlDao getDao() {
		return dao;
	}

	public void setDao(SqlDao dao) {
		this.dao = dao;
	}

	public static void main(String[] args) {
		Gui gui = new Gui();
		gui.show();
		
	}
	
	public void show() {
		initial();
		
		final Display display = new Display(); //����Displayʵ��
        final Shell shell = new Shell(display , SWT.MIN);  //����Shellʵ��
        shell.setText("send sms");              //���ô��ڵ���ʾ��ǩ
        shell.setBounds(400,200,300,350);    //����shell����ʾ��Χ
        //���ô��ڲ���
        GridLayout gShellLay = new GridLayout();
        shell.setLayout(gShellLay);
        
        Font font = new Font(display , "宋体", 18 , SWT.NORMAL);
       
        Composite panel = new Composite(shell,SWT.NONE);
        GridData gPanelData = new GridData(GridData.GRAB_HORIZONTAL|
       		 GridData.GRAB_VERTICAL|GridData.FILL_BOTH);
		panel.setLayoutData(gPanelData);
		//ΪPanelҲ����һ�����ֶ����ı���Ͱ���������ֶ�������ʾ��
		GridLayout gPanelLay = new GridLayout();
		panel.setLayout(gPanelLay);
		
		GridData gTextData = new GridData (270  , 40 );
		
		/**
         * label
         */
        Label wangwang=new Label(panel,SWT.CENTER);//����SWT.CENTER��ʽ����������ʾ
        wangwang.setFont(font);
        wangwang.setText("旺旺ID");
        
		/**
		 * text box
		 */
        final Text wangwangText = new Text(panel,SWT.SINGLE|SWT.WRAP);
        wangwangText.setFont(font);
        wangwangText.setLayoutData(gTextData);
        
        /**
         * label
         */
        Label name=new Label(panel,SWT.CENTER);//����SWT.CENTER��ʽ����������ʾ
        name.setFont(font);
        name.setText("姓名");
        
		/**
		 * text box
		 */
        final Text nameText = new Text(panel,SWT.SINGLE|SWT.WRAP);
        nameText.setFont(font);
        nameText.setLayoutData(gTextData);
        
        /**
         * label
         */
        Label helloLabel=new Label(panel,SWT.CENTER);//����SWT.CENTER��ʽ����������ʾ
        helloLabel.setFont(font);
        helloLabel.setText("手机");
        
		/**
		 * text box
		 */
        final Text text = new Text(panel,SWT.SINGLE|SWT.WRAP);
        
        text.setFont(font);
        text.setTextLimit(11);
        text.setLayoutData(gTextData);
        
        /**
         * button
         */
        final Button button = new Button(panel , SWT.NONE);
        GridData gButtonData = new GridData (270  , 40 );
        button.setFont(font);
        button.setText("确定"); 
        button.setLayoutData(gButtonData);
        
        /**
         * button �¼�
         */
        SelectionAdapter sa = new SelectionAdapter() {
        	public void widgetSelected(SelectionEvent e) {
        		SellInfo sellinfo = new SellInfo();
        		sellinfo.setMobile(text.getText().trim());
        		sellinfo.setName(nameText.getText().trim());
        		sellinfo.setWangwangID(wangwangText.getText().trim());
        		sellinfo.setCouponType(SellInfo.RMB10);
        		run( display , shell , sellinfo );
             }
		};
        button.addSelectionListener(sa);
        
        /**
         * �س��¼�
         */
        KeyListener kl = new KeyAdapter() {
        	public void keyPressed(KeyEvent  e) {
        		if(e.keyCode == SWT.CR){
        			e.doit = false;  
        			SellInfo sellinfo = new SellInfo();
            		sellinfo.setMobile(text.getText().trim());
            		sellinfo.setName(nameText.getText().trim());
            		sellinfo.setWangwangID(wangwangText.getText().trim());
            		sellinfo.setCouponType(SellInfo.RMB10);
            		run( display , shell , sellinfo );
        		}
             }
        };
        text.addKeyListener(kl);
        
        shell.open(); //��shell�������ڴ򿪴���
        //��ʼ�¼�����ѭ����ֱ���û��رմ���
        while (!shell.isDisposed()) {
        if (!display.readAndDispatch())
             display.sleep();
        }
        display.dispose();
    }

	/**
	 * �����¼�
	 * @param display
	 * @param shell
	 * @param se
	 */
	protected void run (final Display display , final Shell shell, SellInfo se) {
		Runnable runnable = new  BackwardThread(display , shell , se);
        new Thread(runnable).start();  
	}
	
	class BackwardThread implements Runnable {  
		final Display display;
		final Shell shell;
		final SellInfo sellInfo ; 
		private Map<String , String> map;
		public BackwardThread (Display d , Shell s , SellInfo sellinfo) {
			this.shell = s;
			this.display = d;
			this.sellInfo = sellinfo;
		}
        public void run() {  
        	try {
    			WorkThread thread = new WorkThread(dao, sellInfo );
    			map = (Map)thread.call();
//    			buildMessageBox(shell, map.get("status"), map.get("mobile"));
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
        	
            display.asyncExec(new BuildMessageBox(display , shell , map));  
        }  
    };// ��������߳� 
	
	public static void initial() {
		PropertyConfigurator.configure("properties/log4j.property");
		dao = DaoFactory.byDefault(null);
	}
	
	class BuildMessageBox implements Runnable{
		private Display display;
		private Shell shell;
		private Map<String , String> map;
		private SellInfo sellInfo ;
		public BuildMessageBox (Display d , Shell s ,  Map map) {
			this.shell = s;
			this.display = d;
			this.map = map;
			this.sellInfo = (SellInfo) map.get("sellInfo");
		}
		
		public void MessageBox(Shell shell ,String title ,  String content) {
			MessageBox messageBox = new MessageBox(shell, SWT.APPLICATION_MODAL | SWT.YES);  
			messageBox.setText(title);
			messageBox.setMessage(content);  
			messageBox.open();
		}
		@Override
		public void run() {
			String content = map.get("status") + "\n";
			content += sellInfo.getMobile();
			MessageBox(shell, map.get("status"), content);
		} 
		
	}
	
	
	class WorkThread implements Callable {
		private SqlDao dao ;
		private SellInfo sellInfo ;

		public SqlDao getDao() {
			return dao;
		}

		public void setDao(SqlDao dao) {
			this.dao = dao;
		}

		public WorkThread(SqlDao d  , SellInfo si) {
			this.dao = d;
			this.sellInfo = si;
		}

		@Override
		public Object call() {
			Map res = new HashMap();
			SendCoupon sc = new SendCoupon(dao , sellInfo);
			/**
			 * test block
			 */
//			{
//				sc.getAccount();
//				try {
//					Thread.sleep(5000);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				res.put("status", "success");
//			}
			
			try {
				if (sc.exchange()) {
					res.put("sellInfo", sellInfo);
					res.put("status", "success");
				} else {
					res.put("sellInfo", sellInfo);
					res.put("status", "fail");
				}
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			log.info("call end");
			return res;
		}
		
	}
}


