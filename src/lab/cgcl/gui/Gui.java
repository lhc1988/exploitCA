package lab.cgcl.gui;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;

import lab.cgcl.dao.DaoFactory;
import lab.cgcl.dao.SqlDao;
import lab.cgcl.requestClient.SendCoupon;

import org.apache.http.client.ClientProtocolException;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

public class Gui {
	static Logger log = Logger.getLogger(Gui.class);
	private static SqlDao dao ;
	
	public SqlDao getDao() {
		return dao;
	}

	public void setDao(SqlDao dao) {
		this.dao = dao;
	}

	public static void main(String[] args) {
		Gui gui = new Gui();
		gui.show();
		
	}
	
	public void show() {
		initial();
		
		final Display display = new Display(); //创建Display实例
        final Shell shell = new Shell(display , SWT.MIN);  //创建Shell实例
        shell.setText("发送sms");              //设置窗口的显示标签
        shell.setBounds(400,200,300,300);    //设置shell的显示范围
        //设置窗口布局
        GridLayout gShellLay = new GridLayout();
        shell.setLayout(gShellLay);
        
        Font font = new Font(display , "宋体", 18 , SWT.NORMAL);
       
        Composite panel = new Composite(shell,SWT.NONE);
        GridData gPanelData = new GridData(GridData.GRAB_HORIZONTAL|
       		 GridData.GRAB_VERTICAL|GridData.FILL_BOTH);
		panel.setLayoutData(gPanelData);
		//为Panel也设置一个布局对象。文本框和按键将按这个布局对象来显示。
		GridLayout gPanelLay = new GridLayout();
		panel.setLayout(gPanelLay);
		
        /**
         * label
         */
        Label helloLabel=new Label(panel,SWT.CENTER);//采用SWT.CENTER样式，即居中显示
        helloLabel.setFont(font);
        helloLabel.setText("填写手机号");
        
		/**
		 * text box
		 */
        final Text text = new Text(panel,SWT.SINGLE|SWT.WRAP);
        GridData gTextData = new GridData (200  , 40 );
        text.setFont(font);
        text.setTextLimit(11);
        text.setLayoutData(gTextData);
        
        /**
         * button
         */
        final Button button = new Button(panel , SWT.NONE);
        GridData gButtonData = new GridData (200  , 40 );
        button.setFont(font);
        button.setText("确定"); 
        button.setLayoutData(gButtonData);
        
        /**
         * button 事件
         */
        SelectionAdapter sa = new SelectionAdapter() {
        	public void widgetSelected(SelectionEvent e) {
        		run( display , shell , text.getText() );
             }
		};
        button.addSelectionListener(sa);
        
        /**
         * 回车事件
         */
        KeyListener kl = new KeyAdapter() {
        	public void keyPressed(KeyEvent  e) {
        		if(e.keyCode == SWT.CR){
        			e.doit = false;  
        			run( display , shell , text.getText() );
        		}
             }
        };
        text.addKeyListener(kl);
        
        shell.open(); //打开shell，类似于打开窗口
        //开始事件处理循环，直到用户关闭窗口
        while (!shell.isDisposed()) {
        if (!display.readAndDispatch())
             display.sleep();
        }
        display.dispose();
    }

	protected void run (final Display display , final Shell shell, String mobile) {
		Runnable runnable = new  BackwardThread(display , shell ,mobile);
        new Thread(runnable).start();  
	}
	
	class BackwardThread implements Runnable {  
		final Display display;
		final String mobile;
		final Shell shell;
		private Map<String , String> map;
		public BackwardThread (Display d , Shell s , String m) {
			this.mobile = m;
			this.shell = s;
			this.display = d;
		}
        public void run() {  
        	try {
    			WorkThread thread = new WorkThread(dao, mobile );
//    			thread.run();
//    			thread.call();
    			map = (Map)thread.call();
//    			buildMessageBox(shell, map.get("status"), map.get("mobile"));
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
        	
            display.asyncExec(new BuildMessageBox(display , shell , mobile , map));  
        }  
    };// 启动这个线程 
	
	public static void initial() {
		PropertyConfigurator.configure("properties/log4j.property");
		dao = DaoFactory.byDefault();
	}
	
	class BuildMessageBox implements Runnable{
		final Display display;
		final String mobile;
		final Shell shell;
		final Map<String , String> map;
		public BuildMessageBox (Display d , Shell s , String m , Map map) {
			this.mobile = m;
			this.shell = s;
			this.display = d;
			this.map = map;
		}
		
		public void MessageBox(Shell shell ,String title ,  String content) {
			MessageBox messageBox = new MessageBox(shell, SWT.APPLICATION_MODAL | SWT.YES);  
			messageBox.setText(title);
			messageBox.setMessage(content);  
			messageBox.open();
		}
		@Override
		public void run() {
			MessageBox(shell, map.get("status"), map.get("mobile"));
		} 
		
	}
	
	
	class WorkThread implements Callable {
		private String moblie = "";
		private SqlDao dao ;

		public SqlDao getDao() {
			return dao;
		}

		public void setDao(SqlDao dao) {
			this.dao = dao;
		}

		public String getMoblie() {
			return moblie;
		}

		public void setMoblie(String moblie) {
			this.moblie = moblie;
		}
		
		public WorkThread(SqlDao d  , String m) {
			this.moblie = m ;
			this.dao = d;
		}

		@Override
		public Object call() {
			Map<String,String> res = new HashMap<String,String>();
			res.put("mobile", this.moblie);
			SendCoupon sc = new SendCoupon(dao , this.moblie);
			/**
			 * test block
			 */
//			{
//				sc.getAccount();
//				try {
//					Thread.sleep(5000);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				res.put("status", "success");
//			}
			
			try {
				if (sc.exchange()) {
					res.put("status", "success");
				} else {
					res.put("status", "fail");
				}
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			log.info("call end");
			return res;
		}
		
	}
}


